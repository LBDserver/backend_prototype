"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Logger = require('./logger');

var level = process.env.LOG_LEVEL || 'info';

var pino = require('pino')({
  level: level,
  base: null,
  useLevelLabels: true
});
/**
 * Base implementation of logger writing in console.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var ConsoleLogger =
/*#__PURE__*/
function (_Logger) {
  _inherits(ConsoleLogger, _Logger);

  /**
   * Initializes a console logger.
   *
   * Allows to create a child logger by providing the <code>config</code> param.
   * Anything in this configuration will be appended for each log.
   *
   * @param {object} [config] optional child logger configuration
   */
  function ConsoleLogger(config) {
    var _this;

    _classCallCheck(this, ConsoleLogger);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConsoleLogger).call(this));

    if (config) {
      _this.logger = pino.child(config);
    } else {
      _this.logger = pino;
    }

    return _this;
  }
  /**
   * Logs an info message.
   *
   * @param {...object} args arguments to be relayed for logging
   */


  _createClass(ConsoleLogger, [{
    key: "info",
    value: function info() {
      var _this$logger;

      (_this$logger = this.logger).info.apply(_this$logger, arguments);
    }
    /**
     * Logs a warn message.
     *
     * @param {...object} args arguments to be relayed for logging
     */

  }, {
    key: "warn",
    value: function warn() {
      var _this$logger2;

      (_this$logger2 = this.logger).warn.apply(_this$logger2, arguments);
    }
    /**
     * Logs an error message.
     *
     * @param {...object} args arguments to be relayed for logging
     */

  }, {
    key: "error",
    value: function error() {
      var _this$logger3;

      (_this$logger3 = this.logger).error.apply(_this$logger3, arguments);
    }
    /**
     * Logs a debug message.
     *
     * @param {...object} args arguments to be relayed for logging
     */

  }, {
    key: "debug",
    value: function debug() {
      var _this$logger4;

      (_this$logger4 = this.logger).debug.apply(_this$logger4, arguments);
    }
    /**
     * Logs a trace message.
     *
     * @param {...object} args arguments to be relayed for logging
     */

  }, {
    key: "trace",
    value: function trace() {
      var _this$logger5;

      (_this$logger5 = this.logger).trace.apply(_this$logger5, arguments);
    }
  }]);

  return ConsoleLogger;
}(Logger);

module.exports = ConsoleLogger;