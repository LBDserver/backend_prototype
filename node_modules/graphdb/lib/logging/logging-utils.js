"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Utilities related to logging.
 *
 * @author Mihail Radkov
 */
var LoggingUtils =
/*#__PURE__*/
function () {
  function LoggingUtils() {
    _classCallCheck(this, LoggingUtils);
  }

  _createClass(LoggingUtils, null, [{
    key: "getLogPayload",

    /**
     * Creates an object from the provided HTTP response that is suitable for
     * structured logging.
     *
     * Any additional key-value entries from <code>params</code> will be assigned
     * in the created payload object.
     *
     * @protected
     * @param {HttpResponse} response the HTTP response.
     * Used to get the execution time and the base URL
     * @param {object} [params] additional parameters to be appended
     * @return {object} the constructed payload object for logging
     */
    value: function getLogPayload(response) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var payload = {
        elapsedTime: response.getElapsedTime(),
        repositoryUrl: response.getBaseURL()
      };
      Object.assign(payload, params);
      return payload;
    }
  }]);

  return LoggingUtils;
}();

module.exports = LoggingUtils;