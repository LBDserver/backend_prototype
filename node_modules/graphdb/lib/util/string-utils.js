"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Class with utility methods related to strings.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var StringUtils =
/*#__PURE__*/
function () {
  function StringUtils() {
    _classCallCheck(this, StringUtils);
  }

  _createClass(StringUtils, null, [{
    key: "isBlank",

    /**
     * Tells if the provided string is null or blank ignoring
     * whitespace characters.
     *
     * @param {string} string the string to check
     * @return {boolean} <code>true</code> if the string is blank or
     *                    <code>false</code> otherwise
     */
    value: function isBlank(string) {
      return !string || !string.trim().length;
    }
    /**
     * Tells if the provided string is NOT null and NOT blank ignoring
     * whitespace characters.
     *
     * @param {string} string the string to check
     * @return {boolean} <code>true</code> if the string is not blank or
     *                    <code>false</code> otherwise
     */

  }, {
    key: "isNotBlank",
    value: function isNotBlank(string) {
      return !StringUtils.isBlank(string);
    }
  }]);

  return StringUtils;
}();

module.exports = StringUtils;