"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Utility class allowing to iterate a collection.
 *
 * Note: This should be used with immutable collections, e.g no add or remove
 * operations should be performed while iterating.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var Iterable =
/*#__PURE__*/
function () {
  /**
   * Constructs new iterable for the provided collection.
   *
   * @param {Object[]} iterable the collection to iterate
   */
  function Iterable(iterable) {
    _classCallCheck(this, Iterable);

    this.iterable = iterable;
    this.index = 0;
    this.size = iterable.length;
  }
  /**
   * Returns if there are elements left to be iterated from the collection.
   *
   * Use this method before calling {@link next()} to avoid out of bounds error.
   *
   * @return {boolean} <code>true</code> if there is at least single element
   *                    left to iterate or <code>false</code> otherwise
   */


  _createClass(Iterable, [{
    key: "hasNext",
    value: function hasNext() {
      return this.index < this.size;
    }
    /**
     * Returns the next object from the iterable collection.
     *
     * Before invoking this method, check if there are elements to iterate by
     * using {@link hasNext()} because if there are no objects left to iterate,
     * the function will blow with an error.
     *
     * @return {Object} the next iterated object from the collection
     * @throws {Error} if there are no more elements to be iterated
     */

  }, {
    key: "next",
    value: function next() {
      if (!this.hasNext()) {
        throw new Error('There are no elements left to iterate!');
      }

      return this.iterable[this.index++];
    }
    /**
     * Resets the iterable to begin from the start as if it was just constructed.
     *
     * @return {Iterable} the current iterable for method chaining.
     */

  }, {
    key: "reset",
    value: function reset() {
      this.index = 0;
      return this;
    }
  }]);

  return Iterable;
}();

module.exports = Iterable;