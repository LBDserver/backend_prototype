"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('fs');

var StringUtils = require('../util/string-utils');
/**
 * Utilities related to working with files and the file system.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var FileUtils =
/*#__PURE__*/
function () {
  function FileUtils() {
    _classCallCheck(this, FileUtils);
  }

  _createClass(FileUtils, null, [{
    key: "getReadStream",

    /**
     * Opens a readable stream from a file located at the provided file path.
     *
     * If the file path is blank or points to non existent file, the method will
     * result in an error.
     *
     * @param {string} filePath path to the file to be read
     * @return {ReadableStream} stream with the file data
     * @throws {Error} if the file path is not provided or no file exists for it
     */
    value: function getReadStream(filePath) {
      if (StringUtils.isBlank(filePath)) {
        throw new Error('File path is required');
      }

      if (!fs.existsSync(filePath)) {
        throw new Error('File does not exist for path=' + filePath);
      }

      return fs.createReadStream(filePath);
    }
  }]);

  return FileUtils;
}();

module.exports = FileUtils;