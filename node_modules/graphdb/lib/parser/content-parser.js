"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Abstract class defining the API for content type parsers.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var ContentParser =
/*#__PURE__*/
function () {
  /**
   * @param {Object} config is an object containing the parser configuration.
   */
  function ContentParser(config) {
    _classCallCheck(this, ContentParser);

    this.configureParser(config);
  }
  /**
   * Configure the parser instance.
   *
   * @private
   * @param {Object} config
   */


  _createClass(ContentParser, [{
    key: "configureParser",
    value: function configureParser() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.config = config;
    }
    /**
     * @return {Object} config is the passed during the initialization parser
     * config object.
     */

  }, {
    key: "getConfig",
    value: function getConfig() {
      return this.config;
    }
    /**
     * If implemented by successors, this must return boolean <code>true</code>
     * when the wrapped parser supports stream reading by default or
     * <code>false</code> otherwise.
     *
     * @abstract
     * @return {boolean} if the parser supports streaming by default
     */

  }, {
    key: "isStreaming",
    value: function isStreaming() {
      return false;
    }
    /**
     * Implementations should delegate the actual parsing to underlying parser
     * library or to a custom implementation.
     *
     * @abstract
     * @param {string} content which has to be parsed to given format.
     * @param {Object} [config] optional parser configuration.
     * @return {Term} the converted content.
     */

  }, {
    key: "parse",
    value: function parse(content, config) {
      throw new Error('Method #parse(content) must be implemented!');
    }
    /**
     * @abstract
     * @return {string} the type which underlying parser supports which should be
     * the type under which it was registered in the parser registry.
     */

  }, {
    key: "getSupportedType",
    value: function getSupportedType() {
      throw new Error('Method #getSupportedType() must be implemented!');
    }
  }]);

  return ContentParser;
}();

module.exports = ContentParser;