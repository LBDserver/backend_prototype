"use strict";

var _sparqlxmlParse = require("sparqlxml-parse");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ContentParser = require('../parser/content-parser');

var RDFMimeType = require('../http/rdf-mime-type');

var QueryType = require('../query/query-type');

var DataFactory = require('n3').DataFactory;

/**
 * Parse a sparql tuple query xml result and convert it RDFJS-based data
 * structure.
 *
 * A custom parser library is used for the parsing. Also the N3 DataFactory is
 * used for building the data objects instead of the native RDFJS datafactory as
 * there are some minor discrepancies in between them and we already stuck to N3
 * as a default implementation.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var SparqlXmlResultParser =
/*#__PURE__*/
function (_ContentParser) {
  _inherits(SparqlXmlResultParser, _ContentParser);

  /**
   * @param {Object} config is an object containing the parser configuration.
   */
  function SparqlXmlResultParser(config) {
    var _this;

    _classCallCheck(this, SparqlXmlResultParser);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SparqlXmlResultParser).call(this, config));
    _this.parser = new _sparqlxmlParse.SparqlXmlParser({
      dataFactory: DataFactory
    });
    return _this;
  }
  /**
   * This method should be invoked with a text stream and will return also a
   * stream converted to RDFJS objects.
   *
   * Client of the method can subscribe to following events in order to consume
   * the stream:
   * <code>
   * stream.on('variables', (variables) => console.log(variables));
   * stream.on('data', (bindings) => console.log(bindings));
   * stream.on('error', (error) => console.log(error));
   * </code>
   *
   * @param {NodeJS.ReadableStream} stream with the text which has to be parsed
   * to given format.
   * @param {Object} [config] optional parser configuration.
   * @return {NodeJS.ReadableStream|Promise<boolean>} a stream with the
   * converted content for SELECT queries and a Promise which resolves to
   * boolean value for ASK queries.
   */


  _createClass(SparqlXmlResultParser, [{
    key: "parse",
    value: function parse(stream, config) {
      if (config.queryType === QueryType.ASK) {
        return this.parser.parseXmlBooleanStream(stream);
      }

      return this.parser.parseXmlResultsStream(stream);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getSupportedType",
    value: function getSupportedType() {
      return RDFMimeType.SPARQL_RESULTS_XML;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "isStreaming",
    value: function isStreaming() {
      return true;
    }
  }]);

  return SparqlXmlResultParser;
}(ContentParser);

module.exports = SparqlXmlResultParser;