"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var QueryPayload = require('../query/query-payload');

var QueryType = require('../query/query-type');

var QueryLanguage = require('../query/query-language');

var RDFMimeType = require('../http/rdf-mime-type');

var QueryContentType = require('../http/query-content-type');

var SELECT_QUERY_RESULT_TYPES = [RDFMimeType.SPARQL_RESULTS_XML, RDFMimeType.SPARQL_RESULTS_JSON, RDFMimeType.BINARY_RDF_RESULTS_TABLE, RDFMimeType.BOOLEAN_RESULT];
var ASK_QUERY_RESULT_TYPES = [RDFMimeType.SPARQL_RESULTS_XML, RDFMimeType.SPARQL_RESULTS_JSON, RDFMimeType.BOOLEAN_RESULT];
var RDF_FORMATS = [RDFMimeType.RDF_XML, RDFMimeType.N_TRIPLES, RDFMimeType.TURTLE, RDFMimeType.N3, RDFMimeType.N_QUADS, RDFMimeType.JSON_LD, RDFMimeType.RDF_JSON, RDFMimeType.TRIX, RDFMimeType.TRIG, RDFMimeType.BINARY_RDF];
var QUERY_OPERATION_TYPES = [QueryContentType.X_WWW_FORM_URLENCODED, QueryContentType.SPARQL_QUERY];
var QUERY_TO_RESPONSE_TYPE_FORMATS_MAPPING = {
  SELECT: SELECT_QUERY_RESULT_TYPES,
  DESCRIBE: RDF_FORMATS,
  CONSTRUCT: RDF_FORMATS,
  ASK: ASK_QUERY_RESULT_TYPES
};
/**
 * Payload object holding common request parameters applicable for the query
 * endpoint.
 *
 * Mandatory parameters are: query, queryType and responseType. Validation on
 * parameters is executed when <code>QueryPayload.getParams()</code> is invoked.
 *
 * Content type parameter which is used for setting the Content-Type http header
 * is optional and by default
 * <code>application/x-www-form-urlencoded</code> type is set.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */

var GetQueryPayload =
/*#__PURE__*/
function (_QueryPayload) {
  _inherits(GetQueryPayload, _QueryPayload);

  /**
   * Does basic initialization.
   */
  function GetQueryPayload() {
    var _this;

    _classCallCheck(this, GetQueryPayload);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GetQueryPayload).call(this));
    _this.contentType = QueryContentType.X_WWW_FORM_URLENCODED;
    return _this;
  }
  /**
   * @param {string} query The query as string to be evaluated.
   * @return {UpdateQueryPayload}
   * @throws {Error} if the query is not a string
   */


  _createClass(GetQueryPayload, [{
    key: "setQuery",
    value: function setQuery(query) {
      if (typeof query !== 'string') {
        throw new Error('Query must be a string!');
      }

      this.payload.query = query;
      return this;
    }
    /**
     * @return {string} a query which was populated in the payload.
     */

  }, {
    key: "getQuery",
    value: function getQuery() {
      return this.payload.query;
    }
    /**
     * @param {string} [queryLn] the query language that is used for the query.
     * @return {GetQueryPayload}
     * @throws {Error} if the query language is not one of {@link QueryLanguage}
     */

  }, {
    key: "setQueryLn",
    value: function setQueryLn(queryLn) {
      var supportedLanguages = Object.values(QueryLanguage);

      if (typeof queryLn !== 'string' || supportedLanguages.indexOf(queryLn) === -1) {
        throw new Error("Query language must be one of ".concat(supportedLanguages, "!"));
      }

      this.payload.queryLn = queryLn;
      return this;
    }
    /**
     * Populates an optional $key:value binding in the payload. Existing bindings
     * will be overridden.
     *
     * @param {string} [binding] A variable binding name which may appear in the
     *                 query and can be bound to a specific value provided outside
     *                 of the actual query.
     * @param {string} [value] A variable's binding value. See the binding comment
     * @return {GetQueryPayload}
     * @throws {Error} if the binding or the value is not a string
     */

  }, {
    key: "addBinding",
    value: function addBinding(binding, value) {
      if (typeof binding !== 'string' || typeof value !== 'string') {
        throw new Error('Binding and value must be strings!');
      }

      this.payload[binding] = value;
      return this;
    }
    /**
     * @param {boolean} [distinct] Specifies if only distinct query solutions
     *                  should be returned.
     * @return {GetQueryPayload}
     * @throws {Error} if the parameter is not a boolean
     */

  }, {
    key: "setDistinct",
    value: function setDistinct(distinct) {
      if (typeof distinct !== 'boolean') {
        throw new Error('Distinct must be a boolean!');
      }

      this.payload.distinct = distinct;
      return this;
    }
    /**
     * @param {number} limit specifies the maximum number of query solutions to
     *                 return.
     * @return {GetQueryPayload}
     * @throws {Error} if the limit is not a non negative number
     */

  }, {
    key: "setLimit",
    value: function setLimit(limit) {
      if (typeof limit !== 'number' || limit < 0) {
        throw new Error('Limit must be a non negative number!');
      }

      this.payload.limit = limit;
      return this;
    }
    /**
     * @param {number} [offset] Specifies the number of query solutions to skip.
     * @return {GetQueryPayload}
     * @throws {Error} if the offset is not a non negative number
     */

  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      if (typeof offset !== 'number' || offset < 0) {
        throw new Error('Offset must be a non negative number!');
      }

      this.payload.offset = offset;
      return this;
    }
    /**
     * @inheritDoc
     * @throws {Error} if the validation does not pass
     */

  }, {
    key: "validateParams",
    value: function validateParams() {
      if (!this.payload.query) {
        throw new Error('Parameter query is mandatory!');
      }

      if (!this.getQueryType()) {
        throw new Error('Parameter queryType is mandatory!');
      }

      if (!this.getResponseType()) {
        throw new Error('Parameter responseType is mandatory!');
      }

      var responseType = this.getResponseType();
      var allowedFormats = QUERY_TO_RESPONSE_TYPE_FORMATS_MAPPING[this.getQueryType()];

      if (!this.isResponseTypeSupported(responseType, allowedFormats)) {
        throw new Error("Invalid responseType=".concat(responseType, " \n      for ").concat(this.getQueryType(), " query! Must be one of ").concat(allowedFormats));
      }

      return true;
    }
    /**
     * Verifies that responseType is one of the expected types.
     *
     * @private
     * @param {string} responseType
     * @param {Array<string>} formats
     * @return {boolean} true if responseType is one of the expected types and
     * false otherwise.
     */

  }, {
    key: "isResponseTypeSupported",
    value: function isResponseTypeSupported(responseType, formats) {
      return formats.indexOf(responseType) !== -1;
    } // -----------------------------------------------------
    // Configuration properties get/set methods follow below
    // -----------------------------------------------------

    /**
     * A mandatory parameter which is used for resolving the Accept http header
     * required by the RDF store.
     *
     * @param {string} responseType
     * @return {GetQueryPayload}
     * @throws {Error} if the response type is not one of {@link RDFMimeType}
     */

  }, {
    key: "setResponseType",
    value: function setResponseType(responseType) {
      var supportedTypes = Object.values(RDFMimeType);

      if (typeof responseType !== 'string' || supportedTypes.indexOf(responseType) === -1) {
        throw new Error("Response type must be one of ".concat(supportedTypes, "!"));
      }

      this.responseType = responseType;
      return this;
    }
    /**
     * @return {string} response type which was populated in this payload.
     */

  }, {
    key: "getResponseType",
    value: function getResponseType() {
      return this.responseType;
    }
    /**
     * A mandatory parameter used for resolving request headers and resolving
     * the response parsers.
     *
     * @param {QueryType} queryType
     * @return {GetQueryPayload}
     * @throws {Error} if the query type is not one of {@link QueryType}
     */

  }, {
    key: "setQueryType",
    value: function setQueryType(queryType) {
      var supportedTypes = Object.values(QueryType);

      if (typeof queryType !== 'string' || supportedTypes.indexOf(queryType) === -1) {
        throw new Error("Query type must be one of ".concat(supportedTypes, "!"));
      }

      this.queryType = queryType;
      return this;
    }
    /**
     * @return {string} query type which was populated in this payload. The value
     * is one of the {@link QueryType} enum values.
     */

  }, {
    key: "getQueryType",
    value: function getQueryType() {
      return this.queryType;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getSupportedContentTypes",
    value: function getSupportedContentTypes() {
      return QUERY_OPERATION_TYPES;
    }
  }]);

  return GetQueryPayload;
}(QueryPayload);

module.exports = GetQueryPayload;