"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var StatementPayload = require('../repository/statement-payload');

var XSD = require('../model/types').XSD;
/**
 * Object builder used for constructing a statement addition payload.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var AddStatementPayload =
/*#__PURE__*/
function (_StatementPayload) {
  _inherits(AddStatementPayload, _StatementPayload);

  function AddStatementPayload() {
    _classCallCheck(this, AddStatementPayload);

    return _possibleConstructorReturn(this, _getPrototypeOf(AddStatementPayload).apply(this, arguments));
  }

  _createClass(AddStatementPayload, [{
    key: "setLanguage",

    /**
     * Sets the language this statement's object.
     *
     * This makes the statement a literal.
     *
     * @param {string} [language] the object's language
     * @return {AddStatementPayload} the payload for method chaining
     */
    value: function setLanguage(language) {
      this.payload.language = language;
      return this;
    }
    /**
     * Returns the statement object's language.
     *
     * Having a language means it is a literal.
     *
     * @return {string} the language
     */

  }, {
    key: "getLanguage",
    value: function getLanguage() {
      return this.payload.language;
    }
    /**
     * Sets the data type this statement's object.
     *
     * This makes the statement a literal.
     *
     * @param {string} [dataType] the object's data type
     * @return {AddStatementPayload} the payload for method chaining
     */

  }, {
    key: "setDataType",
    value: function setDataType(dataType) {
      this.payload.dataType = dataType;
      return this;
    }
    /**
     * Returns the statement object's data type.
     *
     * Having a data type means it is a literal.
     *
     * @return {string} the data type
     */

  }, {
    key: "getDataType",
    value: function getDataType() {
      return this.payload.dataType;
    }
    /**
     * Sets the statement's object value making it a literal.
     *
     * If the data type is not provided, it will try to autodetect it:
     * <ul>
     *   <li>integer -> xsd:integer</li>
     *   <li>float -> xsd:decimal</li>
     *   <li>boolean -> xsd:boolean</li>
     * </ul>
     * Everything else will be considered as xsd:string.
     *
     * To set a language the data type must be xsd:string.
     *
     * @param {*} value the statements object value
     * @param {string} [type] the statements object data type
     * @param {string} [language] the statements object language
     * @return {AddStatementPayload} the payload for method chaining
     */

  }, {
    key: "setObjectLiteral",
    value: function setObjectLiteral(value, type, language) {
      if (type) {
        if (type === XSD.STRING && language) {
          this.setLanguage(language);
        }

        this.setDataType(type);
      } else {
        this.setDataType(this.detectLiteralType(value));
      }

      this.setObject(value);
      return this;
    }
    /**
     * Autodetect the provided value's data type.
     *
     * @private
     * @param {*} value the value which type will be autodetected
     * @return {string} the detected data type
     */

  }, {
    key: "detectLiteralType",
    value: function detectLiteralType(value) {
      var valueType = _typeof(value);

      if (valueType === 'number') {
        if (value % 1 === 0) {
          return XSD.INTEGER;
        } else {
          return XSD.DECIMAL;
        }
      } else if (valueType === 'boolean') {
        return XSD.BOOLEAN;
      } // Default


      return XSD.STRING;
    }
    /**
     * Returns if this statement payload is for a literal. A literal have
     * data type and/or language.
     *
     * @return {boolean} <code>true</code> if it is a literal payload or
     * <code>false</code> otherwise
     */

  }, {
    key: "isLiteral",
    value: function isLiteral() {
      return !!(this.payload.language || this.payload.dataType);
    }
    /**
     * Sets the base URI that is used for resolving any relative URIs in the
     * current payload.
     *
     * @param {string} baseURI the base URI
     * @return {AddStatementPayload} the payload for method chaining
     */

  }, {
    key: "setBaseURI",
    value: function setBaseURI(baseURI) {
      this.payload.baseURI = baseURI;
      return this;
    }
    /**
     * Returns the base URI that is used for resolving any relative URIs.
     *
     * @return {string} the base URI
     */

  }, {
    key: "getBaseURI",
    value: function getBaseURI() {
      return this.payload.baseURI;
    }
  }]);

  return AddStatementPayload;
}(StatementPayload);

module.exports = AddStatementPayload;