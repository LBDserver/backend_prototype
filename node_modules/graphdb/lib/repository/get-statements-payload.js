"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var StatementPayload = require('../repository/statement-payload');

var RDFMimeType = require('../http/rdf-mime-type');
/**
 * Payload object holding all request parameters applicable for the statements
 * endpoint.
 * <code>new GetStatementsPayload().setSubject('<http://ns>')
 *  .setInference(true).get()</code> returns a constructed payload <code>
 * { subject: '<http://ns>', inference: true }</code>
 *
 * By default <code>responseType</code> is set to
 * <code>application/rdf+json</code>.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var GetStatementsPayload =
/*#__PURE__*/
function (_StatementPayload) {
  _inherits(GetStatementsPayload, _StatementPayload);

  /**
   * Constructs this payload class populating some reasonable defaults.
   */
  function GetStatementsPayload() {
    var _this;

    _classCallCheck(this, GetStatementsPayload);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GetStatementsPayload).call(this));

    _this.setResponseType(RDFMimeType.RDF_JSON);

    return _this;
  }
  /**
   * @param {boolean} [inference] defines if inferred statements should be
   *      included in the result of GET requests.
   * @return {GetStatementsPayload}
   */


  _createClass(GetStatementsPayload, [{
    key: "setInference",
    value: function setInference(inference) {
      this.payload.inference = inference;
      return this;
    }
    /**
     * @return {boolean} inference
     */

  }, {
    key: "getInference",
    value: function getInference() {
      return this.payload.inference;
    }
    /**
     * Sets responseType parameter.
     * @param {RDFMimeType} [responseType]
     * @return {GetStatementsPayload}
     */

  }, {
    key: "setResponseType",
    value: function setResponseType(responseType) {
      this.payload.responseType = responseType;
      return this;
    }
    /**
     * @return {string} responseType
     */

  }, {
    key: "getResponseType",
    value: function getResponseType() {
      return this.payload.responseType;
    }
  }]);

  return GetStatementsPayload;
}(StatementPayload);

module.exports = GetStatementsPayload;