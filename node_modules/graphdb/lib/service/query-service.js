"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Service = require('./service');

var HttpRequestBuilder = require('../http/http-request-builder');

var ServiceRequest = require('./service-request');

var PATH_STATEMENTS = require('./service-paths').PATH_STATEMENTS;

var LoggingUtils = require('../logging/logging-utils');
/**
 * Service for executing queries via {@link GetQueryPayload} or
 * {@link UpdateQueryPayload}.
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var QueryService =
/*#__PURE__*/
function (_Service) {
  _inherits(QueryService, _Service);

  /**
   * Instantiates the query service.
   *
   * @param {Function} httpRequestExecutor used to execute HTTP requests
   * @param {Function} parseExecutor function that will parse provided data
   */
  function QueryService(httpRequestExecutor, parseExecutor) {
    var _this;

    _classCallCheck(this, QueryService);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(QueryService).call(this, httpRequestExecutor));
    _this.parseExecutor = parseExecutor;
    return _this;
  }
  /**
   * Executes request to query a repository.
   *
   * Only POST request with a valid QueryPayload is supported.
   *
   * @param {GetQueryPayload} payload is an object holding request parameters
   * required by the query POST endpoint.
   *
   * @return {ServiceRequest} a service request that will resolve to a readable
   * stream to which the client can subscribe and consume
   * the emitted strings or Quads depending on the provided response type as
   * soon as they are available.
   *
   * @throws {Error} if the payload is misconfigured
   */


  _createClass(QueryService, [{
    key: "query",
    value: function query(payload) {
      var _this2 = this;

      var requestBuilder = HttpRequestBuilder.httpPost('').setData(payload.getParams()).setResponseType('stream').addAcceptHeader(payload.getResponseType()).addContentTypeHeader(payload.getContentType());
      return new ServiceRequest(requestBuilder, function () {
        return _this2.executeQuery(payload, requestBuilder);
      });
    }
    /**
     * Executes a query request with the supplied payload and request builder.
     *
     * @private
     *
     * @param {GetQueryPayload} payload an object holding request parameters
     * required by the query POST endpoint.
     * @param {HttpRequestBuilder} requestBuilder builder containing the request
     * parameters and data
     *
     * @return {Promise} promise resolving to parsed query response
     *
     * @throws {Error} if the payload is misconfigured
     */

  }, {
    key: "executeQuery",
    value: function executeQuery(payload, requestBuilder) {
      var _this3 = this;

      return this.httpRequestExecutor(requestBuilder).then(function (response) {
        var logPayload = LoggingUtils.getLogPayload(response, {
          query: payload.getQuery(),
          queryType: payload.getQueryType()
        });

        _this3.logger.debug(logPayload, 'Queried data');

        var parserConfig = {
          queryType: payload.getQueryType()
        };
        return _this3.parseExecutor(response.getData(), payload.getResponseType(), parserConfig);
      });
    }
    /**
     * Executes a request with a sparql query against <code>/statements</code>
     * endpoint to update repository data.
     *
     * If <code>contentType</code> is set to
     * <code>application/x-www-form-urlencoded</code> then query and request
     * parameters from the payload are encoded as query string and sent as request
     * body.
     *
     * If <code>contentType</code> is set to
     * <code>application/sparql-update</code> then the query is sent unencoded as
     * request body.
     *
     * @param {UpdateQueryPayload} payload
     *
     * @return {ServiceRequest} service request that will be resolved if the
     * update is successful or rejected in case of failure
     *
     * @throws {Error} if the payload is misconfigured
     */

  }, {
    key: "update",
    value: function update(payload) {
      var _this4 = this;

      var requestBuilder = HttpRequestBuilder.httpPost(PATH_STATEMENTS).setData(payload.getParams()).addContentTypeHeader(payload.getContentType());
      return new ServiceRequest(requestBuilder, function () {
        return _this4.httpRequestExecutor(requestBuilder).then(function (response) {
          var logPayload = LoggingUtils.getLogPayload(response, {
            query: payload.getQuery()
          });

          _this4.logger.debug(logPayload, 'Performed update');
        });
      });
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getServiceName",
    value: function getServiceName() {
      return 'StatementsService';
    }
  }]);

  return QueryService;
}(Service);

module.exports = QueryService;