"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Service = require('./service');

var HttpRequestBuilder = require('../http/http-request-builder');

var ServiceRequest = require('./service-request');

var PATH_STATEMENTS = require('./service-paths').PATH_STATEMENTS;

var TermConverter = require('../model/term-converter');

var LoggingUtils = require('../logging/logging-utils');

var FileUtils = require('../util/file-utils');
/**
 * Service for uploading data streams.
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var UploadService =
/*#__PURE__*/
function (_Service) {
  _inherits(UploadService, _Service);

  function UploadService() {
    _classCallCheck(this, UploadService);

    return _possibleConstructorReturn(this, _getPrototypeOf(UploadService).apply(this, arguments));
  }

  _createClass(UploadService, [{
    key: "upload",

    /**
     * Executes a POST request against the <code>/statements</code> endpoint. The
     * statements which have to be added are provided through a readable stream.
     * This method is useful for library client who wants to upload a big data set
     * into the repository.
     *
     * @param {ReadableStream} readStream
     * @param {string} contentType is one of RDF mime type formats,
     *                application/x-rdftransaction' for a transaction document or
     *                application/x-www-form-urlencoded
     * @param {NamedNode|string} [context] optional context to restrict the
     * operation. Will be encoded as N-Triple if it is not already one
     * @param {string} [baseURI] optional uri against which any relative URIs
     * found in the data would be resolved.
     *
     * @return {ServiceRequest} a service request that will be resolved when the
     * stream has been successfully consumed by the server
     */
    value: function upload(readStream, contentType, context, baseURI) {
      var _this = this;

      var requestBuilder = this.getUploadRequest(readStream, contentType, context, baseURI);
      return new ServiceRequest(requestBuilder, function () {
        return _this.httpRequestExecutor(requestBuilder).then(function (response) {
          _this.logger.debug(LoggingUtils.getLogPayload(response, {
            contentType: contentType,
            context: context,
            baseURI: baseURI
          }), 'Uploaded data stream');
        });
      });
    }
    /**
     * Executes a PUT request against the <code>/statements</code> endpoint. The
     * statements which have to be updated are provided through a readable stream.
     * This method is useful for overriding large set of statements that might be
     * provided as a readable stream e.g. reading from file.
     *
     * @param {ReadableStream} readStream
     * @param {string} contentType
     * @param {NamedNode|string} context restrict the operation. Will be encoded
     * as N-Triple if it is not already one
     * @param {string} [baseURI] optional uri against which any relative URIs
     * found in the data would be resolved.
     *
     * @return {ServiceRequest} a service request that will be resolved when the
     * stream has been successfully consumed by the server
     */

  }, {
    key: "overwrite",
    value: function overwrite(readStream, contentType, context, baseURI) {
      var _this2 = this;

      var requestBuilder = this.getOverwriteRequest(readStream, contentType, context, baseURI);
      return new ServiceRequest(requestBuilder, function () {
        return _this2.httpRequestExecutor(requestBuilder).then(function (response) {
          _this2.logger.debug(LoggingUtils.getLogPayload(response, {
            contentType: contentType,
            context: context,
            baseURI: baseURI
          }), 'Overwritten data stream');
        });
      });
    }
    /**
     * Uploads the file specified by the provided file path to the server.
     *
     * See {@link #upload}
     *
     * @param {string} filePath path to a file to be streamed to the server
     * @param {string} contentType MIME type of the file's content
     * @param {string|string[]} [context] restricts the operation to the given
     * context. Will be encoded as N-Triple if it is not already one
     * @param {string} [baseURI] used to resolve relative URIs in the data
     *
     * @return {ServiceRequest} a service request that will be resolved when the
     * file has been successfully consumed by the server
     */

  }, {
    key: "addFile",
    value: function addFile(filePath, contentType, context, baseURI) {
      var _this3 = this;

      var fileStream = FileUtils.getReadStream(filePath);
      var requestBuilder = this.getUploadRequest(fileStream, contentType, context, baseURI);
      return new ServiceRequest(requestBuilder, function () {
        return _this3.httpRequestExecutor(requestBuilder).then(function (response) {
          _this3.logger.debug(LoggingUtils.getLogPayload(response, {
            filePath: filePath,
            contentType: contentType,
            context: context,
            baseURI: baseURI
          }), 'Uploaded file');
        });
      });
    }
    /**
     * Uploads the file specified by the provided file path to the server
     * overwriting any data in the server's repository.
     *
     * The overwrite will be restricted if the context parameter is specified.
     *
     * See {@link #overwrite}
     *
     * @param {string} filePath path to a file to be streamed to the server
     * @param {string} contentType MIME type of the file's content
     * @param {string} [context] restricts the operation to the given context.
     * Will be encoded as N-Triple if it is not already one
     * @param {string} [baseURI] used to resolve relative URIs in the data
     *
     * @return {ServiceRequest} a service request that will be resolved when the
     * file has been successfully consumed by the server
     */

  }, {
    key: "putFile",
    value: function putFile(filePath, contentType, context, baseURI) {
      var _this4 = this;

      var fileStream = FileUtils.getReadStream(filePath);
      var requestBuilder = this.getOverwriteRequest(fileStream, contentType, context, baseURI);
      return new ServiceRequest(requestBuilder, function () {
        return _this4.httpRequestExecutor(requestBuilder).then(function (response) {
          _this4.logger.debug(LoggingUtils.getLogPayload(response, {
            filePath: filePath,
            contentType: contentType,
            context: context,
            baseURI: baseURI
          }), 'Overwritten data from file');
        });
      });
    }
    /**
     * Executes a POST request against the <code>/statements</code> endpoint. The
     * statements which have to be added are provided through a readable stream.
     * This method is useful for library client who wants to upload a big data set
     * into the repository.
     *
     * @private
     *
     * @param {ReadableStream} readStream
     * @param {string} contentType is one of RDF mime type formats,
     *                application/x-rdftransaction' for a transaction document or
     *                application/x-www-form-urlencoded
     * @param {NamedNode|string} [context] optional context to restrict the
     * operation. Will be encoded as N-Triple if it is not already one
     * @param {string} [baseURI] optional uri against which any relative URIs
     * found in the data would be resolved.
     *
     * @return {Promise<HttpResponse|Error>} a promise that will be resolved when
     * the stream has been successfully consumed by the server
     */

  }, {
    key: "getUploadRequest",
    value: function getUploadRequest(readStream, contentType, context, baseURI) {
      return HttpRequestBuilder.httpPost(PATH_STATEMENTS).setData(readStream).addContentTypeHeader(contentType).setResponseType('stream').setParams({
        baseURI: baseURI,
        context: TermConverter.toNTripleValues(context)
      });
    }
    /**
     * Executes a PUT request against the <code>/statements</code> endpoint. The
     * statements which have to be updated are provided through a readable stream.
     * This method is useful for overriding large set of statements that might be
     * provided as a readable stream e.g. reading from file.
     *
     * @private
     *
     * @param {ReadableStream} readStream
     * @param {string} contentType
     * @param {NamedNode|string} context restrict the operation. Will be encoded
     * as N-Triple if it is not already one
     * @param {string} [baseURI] optional uri against which any relative URIs
     * found in the data would be resolved.
     *
     * @return {Promise<HttpResponse|Error>} a promise that will be resolved when
     * the stream has been successfully consumed by the server
     */

  }, {
    key: "getOverwriteRequest",
    value: function getOverwriteRequest(readStream, contentType, context, baseURI) {
      return HttpRequestBuilder.httpPut(PATH_STATEMENTS).setData(readStream).addContentTypeHeader(contentType).setResponseType('stream').setParams({
        baseURI: baseURI,
        context: TermConverter.toNTripleValues(context)
      });
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getServiceName",
    value: function getServiceName() {
      return 'UploadService';
    }
  }]);

  return UploadService;
}(Service);

module.exports = UploadService;