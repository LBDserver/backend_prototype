"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Service = require('./service');

var HttpRequestBuilder = require('../http/http-request-builder');

var PATH_TRANSACTIONS = require('./service-paths').PATH_TRANSACTIONS;

var LoggingUtils = require('../logging/logging-utils');

var StringUtils = require('../util/string-utils');

var RepositoryClientConfig = require('../repository/repository-client-config');

var TransactionalRepositoryClient = require('../transaction/transactional-repository-client');
/**
 * Service for working with the transactions endpoint.
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var TransactionService =
/*#__PURE__*/
function (_Service) {
  _inherits(TransactionService, _Service);

  /**
   * Instantiates the transaction service wioth the supplied executor and
   * repository client config.
   *
   * @param {Function} httpRequestExecutor used to execute HTTP requests
   * @param {RepositoryClientConfig} repositoryClientConfig used to create
   * transaction client configurations
   */
  function TransactionService(httpRequestExecutor, repositoryClientConfig) {
    var _this;

    _classCallCheck(this, TransactionService);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransactionService).call(this, httpRequestExecutor));
    _this.repositoryClientConfig = repositoryClientConfig;
    return _this;
  }
  /**
   * Starts a transaction and produces a {@link TransactionalRepositoryClient}.
   *
   * The transactions ID is extracted from the <code>location</code> header and
   * is used as  endpoint for the produced TransactionalRepositoryClient.
   *
   * If no transaction isolation level is provided, the server will use its
   * default isolation level.
   *
   * @param {string} [isolationLevel] an optional parameter to specify the
   * transaction's level of isolation; for possible values see
   * {@link TransactionIsolationLevel}
   *
   * @return {Promise<TransactionalRepositoryClient>} transactional client
   */


  _createClass(TransactionService, [{
    key: "beginTransaction",
    value: function beginTransaction(isolationLevel) {
      var _this2 = this;

      var requestBuilder = HttpRequestBuilder.httpPost(PATH_TRANSACTIONS).addParam('isolation-level', isolationLevel);
      return this.httpRequestExecutor(requestBuilder).then(function (response) {
        var locationUrl = response.getHeaders()['location'];

        if (StringUtils.isBlank(locationUrl)) {
          _this2.logger.error(LoggingUtils.getLogPayload(response, {
            isolationLevel: isolationLevel
          }), 'Cannot obtain transaction ID');

          return Promise.reject(new Error('Couldn\'t obtain transaction ID'));
        }

        var config = _this2.getTransactionalClientConfig(locationUrl);

        var transactionClient = new TransactionalRepositoryClient(config);

        _this2.logger.debug(LoggingUtils.getLogPayload(response, {
          isolationLevel: isolationLevel
        }), 'Started transaction');

        return transactionClient;
      });
    }
    /**
     * Builds client configuration for transactional repository out of the
     * provided repository client config and the supplied location URL.
     *
     * @private
     *
     * @param {string} locationUrl the url for the transactional repo endpoint
     *
     * @return {RepositoryClientConfig} the built transaction client config
     */

  }, {
    key: "getTransactionalClientConfig",
    value: function getTransactionalClientConfig(locationUrl) {
      var config = this.repositoryClientConfig;
      return new RepositoryClientConfig().setEndpoints([locationUrl]).setHeaders(config.getHeaders()).setDefaultRDFMimeType(config.getDefaultRDFMimeType()).setReadTimeout(config.getReadTimeout()).setWriteTimeout(config.getWriteTimeout());
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getServiceName",
    value: function getServiceName() {
      return 'TransactionService';
    }
  }]);

  return TransactionService;
}(Service);

module.exports = TransactionService;