"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ConsoleLogger = require('../logging/console-logger');
/**
 * Base service class containing common and utility logic for
 * extending services.
 *
 * @class
 * @abstract
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var Service =
/*#__PURE__*/
function () {
  /**
   * Instantiates the service with the provided HTTP request executor function.
   *
   * @param {Function} httpRequestExecutor used to execute HTTP requests
   */
  function Service(httpRequestExecutor) {
    _classCallCheck(this, Service);

    this.httpRequestExecutor = httpRequestExecutor;
    this.initLogger();
  }
  /**
   * Instantiates the service's logger.
   *
   * @private
   */


  _createClass(Service, [{
    key: "initLogger",
    value: function initLogger() {
      this.logger = new ConsoleLogger({
        name: this.getServiceName()
      });
    }
    /**
     * Returns the service's name.
      * @abstract
     *
     * @return {string} the name
     */

  }, {
    key: "getServiceName",
    value: function getServiceName() {
      throw new Error('Must be overridden!');
    }
  }]);

  return Service;
}();

module.exports = Service;