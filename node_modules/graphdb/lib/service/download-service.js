"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Service = require('./service');

var HttpRequestBuilder = require('../http/http-request-builder');

var ServiceRequest = require('./service-request');

var PATH_STATEMENTS = require('./service-paths').PATH_STATEMENTS;

var LoggingUtils = require('../logging/logging-utils');

var TermConverter = require('../model/term-converter');
/**
 * Service for downloading data via {@link GetStatementsPayload}.
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var DownloadService =
/*#__PURE__*/
function (_Service) {
  _inherits(DownloadService, _Service);

  function DownloadService() {
    _classCallCheck(this, DownloadService);

    return _possibleConstructorReturn(this, _getPrototypeOf(DownloadService).apply(this, arguments));
  }

  _createClass(DownloadService, [{
    key: "download",

    /**
     * Fetch rdf data from statements endpoint using provided parameters.
     *
     * The request is configured so that expected response should be a readable
     * stream.
     *
     * Provided request params will be automatically converted to N-Triples if
     * they are not already encoded as such.
     *
     * @param {GetStatementsPayload} payload is an object holding request params
     *
     * @return {ServiceRequest} a service request that will resolve to a readable
     * stream to which the client can subscribe and consume the emitted strings
     * depending on the provided response type as soon as they are available.
     */
    value: function download(payload) {
      var _this = this;

      var requestBuilder = HttpRequestBuilder.httpGet(PATH_STATEMENTS).addAcceptHeader(payload.getResponseType()).setResponseType('stream').setParams({
        subj: TermConverter.toNTripleValue(payload.getSubject()),
        pred: TermConverter.toNTripleValue(payload.getPredicate()),
        obj: TermConverter.toNTripleValue(payload.getObject()),
        context: TermConverter.toNTripleValues(payload.getContext()),
        infer: payload.getInference()
      });
      return new ServiceRequest(requestBuilder, function () {
        return _this.httpRequestExecutor(requestBuilder).then(function (response) {
          _this.logger.debug(LoggingUtils.getLogPayload(response, requestBuilder.getParams()), 'Downloaded data');

          return response.getData();
        });
      });
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getServiceName",
    value: function getServiceName() {
      return 'DownloadService';
    }
  }]);

  return DownloadService;
}(Service);

module.exports = DownloadService;