"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Service = require('./service');

var HttpRequestBuilder = require('../http/http-request-builder');

var ServiceRequest = require('./service-request');

var PATH_SIZE = require('./service-paths').PATH_SIZE;

var TermConverter = require('../model/term-converter');

var LoggingUtils = require('../logging/logging-utils');
/**
 * Service for working repositories.
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var RepositoryService =
/*#__PURE__*/
function (_Service) {
  _inherits(RepositoryService, _Service);

  function RepositoryService() {
    _classCallCheck(this, RepositoryService);

    return _possibleConstructorReturn(this, _getPrototypeOf(RepositoryService).apply(this, arguments));
  }

  _createClass(RepositoryService, [{
    key: "getSize",

    /**
     * Retrieves the size of the repository.
     *
     * Effectively returns how much statements are in the repository.
     *
     * If one or multiple context are provided, the operation will be restricted
     * upon each of them.
     *
     * @param {string|string[]} [context] context or contexts to restrict the
     * size calculation. Will be encoded as N-Triple if it is not already one
     *
     * @return {ServiceRequest} a service request resolving to the total number of
     * statements in the repository
     */
    value: function getSize(context) {
      var _this = this;

      var requestBuilder = HttpRequestBuilder.httpGet(PATH_SIZE).addParam('context', TermConverter.toNTripleValues(context));
      return new ServiceRequest(requestBuilder, function () {
        return _this.httpRequestExecutor(requestBuilder).then(function (response) {
          var logPayload = LoggingUtils.getLogPayload(response, {
            context: context
          });

          _this.logger.debug(logPayload, 'Fetched size');

          return response.getData();
        });
      });
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getServiceName",
    value: function getServiceName() {
      return 'RepositoryService';
    }
  }]);

  return RepositoryService;
}(Service);

module.exports = RepositoryService;