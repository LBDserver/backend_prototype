"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var StringUtils = require('../util/string-utils');
/**
 * Holds request information applicable to {@link HttpClient}.
 *
 * @class
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var HttpRequestBuilder =
/*#__PURE__*/
function () {
  /**
   * Does default initialization of the configuration.
   */
  function HttpRequestBuilder() {
    _classCallCheck(this, HttpRequestBuilder);

    this.config = {};
  }
  /**
   * Prepares new builder for HTTP GET request against the provided URL.
   *
   * @static
   * @param {string} url
   * @return {HttpRequestBuilder}
   */


  _createClass(HttpRequestBuilder, [{
    key: "addHeader",

    /**
     * Add a new http header entry. Blank values are skipped.
     *
     * @param {string} header type
     * @param {string} value the header value
     * @return {HttpRequestBuilder}
     */
    value: function addHeader(header, value) {
      if (StringUtils.isBlank(value)) {
        return this;
      }

      if (!this.config.headers) {
        this.config.headers = {};
      }

      this.config.headers[header] = value;
      return this;
    }
    /**
     * Sets the headers map.
     *
     * @param {Object<string, string>} headers the headers map
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "setHeaders",
    value: function setHeaders(headers) {
      this.config.headers = headers;
      return this;
    }
    /**
     * Returns the headers map.
     *
     * @return {Object<string, string>}
     */

  }, {
    key: "getHeaders",
    value: function getHeaders() {
      return this.config.headers;
    }
    /**
     * Add a specific header of type <code>Accept</code> with the given value.
     *
     * @param {string} value
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "addAcceptHeader",
    value: function addAcceptHeader(value) {
      return this.addHeader('Accept', value);
    }
    /**
     * Add a specific header of type <code>Content-Type</code> with the given
     * value.
     *
     * @param {string} value
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "addContentTypeHeader",
    value: function addContentTypeHeader(value) {
      return this.addHeader('Content-Type', value);
    }
    /**
     * Set request parameters object.
     *
     * @param {Object} params
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "setParams",
    value: function setParams(params) {
      this.config.params = params;
      return this;
    }
    /**
     * Add a new request param.
     *
     * @param {string} param
     * @param {*} value
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "addParam",
    value: function addParam(param, value) {
      if (!value) {
        return this;
      }

      if (!this.config.params) {
        this.config.params = {};
      }

      this.config.params[param] = value;
      return this;
    }
    /**
     * Returns the request parameters map.
     *
     * @return {Object<string, *>}
     */

  }, {
    key: "getParams",
    value: function getParams() {
      return this.config.params;
    }
    /**
     * Set timeout configuration.
     *
     * @param {number} timeout in ms
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "setTimeout",
    value: function setTimeout(timeout) {
      this.config.timeout = timeout;
      return this;
    }
    /**
     * Returns the request timeout.
     *
     * @return {number}
     */

  }, {
    key: "getTimeout",
    value: function getTimeout() {
      return this.config.timeout;
    }
    /**
     * Set a responseType config.
     *
     * @param {string} responseType
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "setResponseType",
    value: function setResponseType(responseType) {
      this.config.responseType = responseType;
      return this;
    }
    /**
     * Returns the request's response type.
     *
     * @return {string}
     */

  }, {
    key: "getResponseType",
    value: function getResponseType() {
      return this.config.responseType;
    }
    /**
     * Sets the data to be sent as request payload.
     *
     * @param {*} data the payload
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "setData",
    value: function setData(data) {
      this.config.data = data;
      return this;
    }
    /**
     * Gets the data to be sent as payload.
     *
     * @return {*}
     */

  }, {
    key: "getData",
    value: function getData() {
      return this.config.data;
    }
    /**
     * Sets the URL against which to perform the request.
     *
     * @param {string} url
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "setUrl",
    value: function setUrl(url) {
      this.config.url = url;
      return this;
    }
    /**
     * Gets the URL.
     *
     * @return {string}
     */

  }, {
    key: "getUrl",
    value: function getUrl() {
      return this.config.url;
    }
    /**
     * Sets the HTTP method.
     *
     * @param {string} method
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "setMethod",
    value: function setMethod(method) {
      this.config.method = method;
      return this;
    }
    /**
     * Gets the HTTP method.
     *
     * @return {string}
     */

  }, {
    key: "getMethod",
    value: function getMethod() {
      return this.config.method;
    }
    /**
     * Getter for the configuration.
     * @return {Object}
     */

  }, {
    key: "get",
    value: function get() {
      return this.config;
    }
  }], [{
    key: "httpGet",
    value: function httpGet(url) {
      return new HttpRequestBuilder().setMethod('get').setUrl(url);
    }
    /**
     * Prepares new builder for HTTP POST request against the provided URL.
     *
     * @static
     * @param {string} url
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "httpPost",
    value: function httpPost(url) {
      return new HttpRequestBuilder().setMethod('post').setUrl(url);
    }
    /**
     * Prepares new builder for HTTP PUT request against the provided URL.
     *
     * @static
     * @param {string} url
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "httpPut",
    value: function httpPut(url) {
      return new HttpRequestBuilder().setMethod('put').setUrl(url);
    }
    /**
     * Prepares new builder for HTTP DELETE request against the provided URL.
     *
     * @static
     * @param {string} url
     * @return {HttpRequestBuilder}
     */

  }, {
    key: "httpDelete",
    value: function httpDelete(url) {
      return new HttpRequestBuilder().setMethod('delete').setUrl(url);
    }
  }]);

  return HttpRequestBuilder;
}();

module.exports = HttpRequestBuilder;