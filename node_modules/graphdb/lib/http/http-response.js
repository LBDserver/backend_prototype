"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Wrapper for HTTP responses.
 *
 * Includes the HTTP client that performed the request and received the response
 * and the elapsed time in milliseconds.
 *
 * @class
 * @author Mihail Radkov
 */
var HttpResponse =
/*#__PURE__*/
function () {
  /**
   * Constructs new wrapper with the supplied response and client.
   * @param {AxiosResponse} response the HTTP response
   * @param {HttpClient} httpClient client that performed the HTTP request
   */
  function HttpResponse(response, httpClient) {
    _classCallCheck(this, HttpResponse);

    this.response = response;
    this.httpClient = httpClient;
  }
  /**
   * Returns the HTTP response's data.
   *
   * @return {string|any} the response data
   */


  _createClass(HttpResponse, [{
    key: "getData",
    value: function getData() {
      return this.response.data;
    }
    /**
     * Returns the HTTP response's headers.
     *
     * @return {{object}} the headers map
     */

  }, {
    key: "getHeaders",
    value: function getHeaders() {
      return this.response.headers;
    }
    /**
     * Sets the elapsed time of the request and response.
     *
     * @param {number} elapsedTime the elapsed time in milliseconds
     */

  }, {
    key: "setElapsedTime",
    value: function setElapsedTime(elapsedTime) {
      this.elapsedTime = elapsedTime;
    }
    /**
     * Returns the elapsed time of the HTTP request execution.
     *
     * @return {number} the elapsed time in milliseconds
     */

  }, {
    key: "getElapsedTime",
    value: function getElapsedTime() {
      return this.elapsedTime;
    }
    /**
     * Returns the base URL to which this request was performed.
     *
     * @return {string} the base URL
     */

  }, {
    key: "getBaseURL",
    value: function getBaseURL() {
      return this.httpClient.getBaseURL();
    }
  }]);

  return HttpResponse;
}();

module.exports = HttpResponse;