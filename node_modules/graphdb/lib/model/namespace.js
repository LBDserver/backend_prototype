"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Class for containing a namespace and it's associated prefix.
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var Namespace =
/*#__PURE__*/
function () {
  /**
   * Instantiates a namespace with its prefix.
   *
   * @param {string} prefix the namespace prefix
   * @param {NamedNode} namespace the namespace as named node
   */
  function Namespace(prefix, namespace) {
    _classCallCheck(this, Namespace);

    this.prefix = prefix;
    this.namespace = namespace;
  }
  /**
   * Returns the namespace prefix.
   *
   * @return {string} the namespace prefix
   */


  _createClass(Namespace, [{
    key: "getPrefix",
    value: function getPrefix() {
      return this.prefix;
    }
    /**
     * Returns the namespace.
     *
     * @return {NamedNode} the namespace as named node
     */

  }, {
    key: "getNamespace",
    value: function getNamespace() {
      return this.namespace;
    }
  }]);

  return Namespace;
}();

module.exports = Namespace;